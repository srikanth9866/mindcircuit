name: CI-CD (Maven + SonarQube + Nexus + Tomcat)

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      TOMCAT_MANAGER_URL: http://54.91.100.164:8095/manager/text
      TOMCAT_USER: ${{ secrets.TOMCAT_USER }}
      TOMCAT_PASSWORD: ${{ secrets.TOMCAT_PASSWORD }}

    steps:
      # === git ===
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # === java + maven ===
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # === settings.xml ===
      - name: Generate Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>NexusRepo</id>
                <username>${{ secrets.NEXUS_USERNAME }}</username>
                <password>${{ secrets.NEXUS_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF
          echo "Generated ~/.m2/settings.xml"

      # === sonar ===
      - name: SonarQube Scan
        run: |
          mvn -B -DskipTests=true sonar:sonar \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}"

      # === purge ===
      - name: Purge local Maven repo
        run: mvn -B dependency:purge-local-repository -DreResolve=true

      # === build ===
      - name: Build
        run: mvn -B clean install

      # === nexus deploy ===
      - name: Deploy to Nexus
        run: mvn -B deploy

      name: CI-CD (Maven + SonarQube + Nexus + Tomcat)

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      TOMCAT_MANAGER_URL: http://54.91.100.164:8095/manager/text
      TOMCAT_USER: ${{ secrets.TOMCAT_USER }}
      TOMCAT_PASSWORD: ${{ secrets.TOMCAT_PASSWORD }}

    steps:
      # === git ===
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # === java + maven ===
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # === settings.xml ===
      - name: Generate Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>NexusRepo</id>
                <username>${{ secrets.NEXUS_USERNAME }}</username>
                <password>${{ secrets.NEXUS_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF
          echo "Generated ~/.m2/settings.xml"
      # === sonar ===
      - name: SonarQube Scan
        run: |
          mvn -B -DskipTests=true sonar:sonar \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}"
      # === purge ===
      - name: Purge local Maven repo
        run: mvn -B dependency:purge-local-repository -DreResolve=true

      # === build ===
      - name: Build
        run: mvn -B clean install

      # === nexus deploy ===
      - name: Deploy to Nexus
        run: mvn -B deploy

      # === tomcat deploy ===
      - name: Deploy WAR to Tomcat
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        shell: bash
        run: |
          set -euo pipefail
          WAR_FILE="$(ls -1 target/*.war | head -n 1)"
          echo "Deploying WAR: $WAR_FILE"
          echo "Undeploying old /app ..."
          curl -sf -u "${TOMCAT_USER}:${TOMCAT_PASSWORD}" \
            "${TOMCAT_MANAGER_URL}/undeploy?path=/app1" || true
          echo "Deploying new WAR ..."
          curl -sf -u "${TOMCAT_USER}:${TOMCAT_PASSWORD}" \
            -T "${WAR_FILE}" \
            "${TOMCAT_MANAGER_URL}/deploy?path=/app&update=true"
          echo "Deployment done âœ…"
