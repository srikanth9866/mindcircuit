name: CI-CD (Maven + SonarQube + Nexus + Tomcat)

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      TOMCAT_MANAGER_URL: http://54.91.100.164:8095/manager/text
      TOMCAT_USER: ${{ secrets.TOMCAT_USER }}
      TOMCAT_PASSWORD: ${{ secrets.TOMCAT_PASSWORD }}

    steps:
      # === Checkout code ===
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # === Configure temporary AWS credentials via OIDC ===
      # Needed to access Secrets Manager
      - name: Assume role to access AWS Secrets
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::707479681391:role/aws-secerts-githhubs111
          role-session-name: GitHubActionsSession
          aws-region: us-east-1

      # === Fetch AWS credentials from Secrets Manager and configure CLI ===
      - name: Load AWS credentials from Secrets Manager
        id: load_aws_keys
        run: |
          CREDS=$(aws secretsmanager get-secret-value \
            --secret-id secert/aws_credentials/github \
            --query SecretString \
            --output text)

          echo "$CREDS" > aws-creds.json

          export AWS_ACCESS_KEY_ID=$(jq -r '.AWS_ACCESS_KEY_ID' aws-creds.json)
          export AWS_SECRET_ACCESS_KEY=$(jq -r '.AWS_SECRET_ACCESS_KEY' aws-creds.json)

          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV

          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region us-east-1

      # === Fetch SONAR_HOST_URL from Secrets Manager ===
      - name: Load SONAR_HOST_URL from Secrets Manager
        id: sonar_host
        run: |
          SONAR_HOST_URL=$(aws secretsmanager get-secret-value \
            --secret-id secert/sonarurl/github \
            --query SecretString \
            --output text)
          echo "SONAR_HOST_URL=$SONAR_HOST_URL" >> $GITHUB_ENV

      # === Set up Java 17 ===
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # === Generate Maven settings.xml for Nexus ===
      - name: Generate Maven settings.xml
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>NexusRepo</id>
                <username>${{ secrets.NEXUS_USERNAME }}</username>
                <password>${{ secrets.NEXUS_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF
          echo "Generated ~/.m2/settings.xml"

      # === SonarQube Scan ===
      - name: SonarQube Scan
        run: |
          mvn -B -DskipTests=true sonar:sonar \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}"

      # === Purge local Maven repo ===
      - name: Purge local Maven repo
        run: mvn -B dependency:purge-local-repository -DreResolve=true

      # === Build the application ===
      - name: Build
        run: mvn -B clean install

      # === Deploy to Nexus ===
      - name: Deploy to Nexus
        run: mvn -B deploy

      # === Deploy WAR to Tomcat ===
      - name: Deploy to Tomcat
        run: |
          WAR_FILE=$(find target -name "*.war" | head -n 1)
          curl -v -u $TOMCAT_USER:$TOMCAT_PASSWORD \
            -T "$WAR_FILE" \
            "$TOMCAT_MANAGER_URL/deploy?path=/myapp&update=true"
